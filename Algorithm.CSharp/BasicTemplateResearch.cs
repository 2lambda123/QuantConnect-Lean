/*
 * QUANTCONNECT.COM - Democratizing Finance, Empowering Individuals.
 * Lean Algorithmic Trading Engine v2.0. Copyright 2014 QuantConnect Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

using QuantConnect.Interfaces;

namespace QuantConnect.Algorithm.CSharp
{
    public class BasicTemplateResearch : IRegressionResearchDefinition
    {
        public string ExpectedOutput => 
            "{ cells: [  {   cell_type: markdown,   id: ac01478a,   metadata: {    papermill: {     duration: 0.00699,     end_time: 2022-03-01T11:15:06.778451,     exception: false,     start_time: 2022-03-01T11:15:06.771461,     status: completed    },    tags: []   },   source: [    ![QuantConnect Logo](https://cdn.quantconnect.com/web/i/qc_notebook_logo_rev0.png),    ## Welcome to The QuantConnect Research Page,    #### Refer to this page for documentation https://www.quantconnect.com/docs/research/overview#,    #### Contribute to this template file https://github.com/QuantConnect/Lean/blob/master/Research/BasicQuantBookTemplate.ipynb   ]  },  {   cell_type: markdown,   id: 98f4aa47,   metadata: {    papermill: {     duration: 0.004367,     end_time: 2022-03-01T11:15:06.787293,     exception: false,     start_time: 2022-03-01T11:15:06.782926,     status: completed    },    tags: []   },   source: [    ## QuantBook Basics,    ,    ### Start QuantBook,    - Add the references and imports,    - Create a QuantBook instance   ]  },  {   cell_type: code,   execution_count: 1,   id: 06ff35bb,   metadata: {    execution: {     iopub.execute_input: 2022-03-01T11:15:06.797454Z,     iopub.status.busy: 2022-03-01T11:15:06.797454Z,     iopub.status.idle: 2022-03-01T11:15:06.805255Z,     shell.execute_reply: 2022-03-01T11:15:06.804268Z    },    papermill: {     duration: 0.014793,     end_time: 2022-03-01T11:15:06.805255,     exception: false,     start_time: 2022-03-01T11:15:06.790462,     status: completed    },    tags: []   },   outputs: [],   source: [    import warnings,    warnings.filterwarnings(ignore)   ]  },  {   cell_type: code,   execution_count: 2,   id: 73a6c7a5,   metadata: {    execution: {     iopub.execute_input: 2022-03-01T11:15:06.817791Z,     iopub.status.busy: 2022-03-01T11:15:06.816791Z,     iopub.status.idle: 2022-03-01T11:15:08.380270Z,     shell.execute_reply: 2022-03-01T11:15:08.380270Z    },    papermill: {     duration: 1.570062,     end_time: 2022-03-01T11:15:08.380270,     exception: false,     start_time: 2022-03-01T11:15:06.810208,     status: completed    },    tags: []   },   outputs: [],   source: [    # Load in our startup script, required to set runtime for PythonNet,    %run ./start.py   ]  },  {   cell_type: code,   execution_count: 3,   id: d18b089f,   metadata: {    execution: {     iopub.execute_input: 2022-03-01T11:15:08.723863Z,     iopub.status.busy: 2022-03-01T11:15:08.723314Z,     iopub.status.idle: 2022-03-01T11:15:08.774134Z,     shell.execute_reply: 2022-03-01T11:15:08.773132Z    },    papermill: {     duration: 0.389881,     end_time: 2022-03-01T11:15:08.774134,     exception: false,     start_time: 2022-03-01T11:15:08.384253,     status: completed    },    tags: []   },   outputs: [],   source: [    # Create an instance,    qb = QuantBook(),    ,    # Select asset data,    spy = qb.AddEquity(SPY)   ]  },  {   cell_type: markdown,   id: d0f84928,   metadata: {    papermill: {     duration: 0.003001,     end_time: 2022-03-01T11:15:08.781131,     exception: false,     start_time: 2022-03-01T11:15:08.778130,     status: completed    },    tags: []   },   source: [    ### Historical Data Requests,    ,    We can use the QuantConnect API to make Historical Data Requests. The data will be presented as multi-index pandas.DataFrame where the first index is the Symbol.,    ,    For more information, please follow the [link](https://www.quantconnect.com/docs#Historical-Data-Historical-Data-Requests).   ]  },  {   cell_type: code,   execution_count: 4,   id: 397645e3,   metadata: {    execution: {     iopub.execute_input: 2022-03-01T11:15:08.792074Z,     iopub.status.busy: 2022-03-01T11:15:08.792074Z,     iopub.status.idle: 2022-03-01T11:15:08.804849Z,     shell.execute_reply: 2022-03-01T11:15:08.804849Z    },    papermill: {     duration: 0.019775,     end_time: 2022-03-01T11:15:08.804849,     exception: false,     start_time: 2022-03-01T11:15:08.785074,     status: completed    },    tags: []   },   outputs: [],   source: [    startDate = DateTime(2021,1,1),    endDate = DateTime(2021,12,31)   ]  },  {   cell_type: code,   execution_count: 5,   id: 00fe36b2,   metadata: {    execution: {     iopub.execute_input: 2022-03-01T11:15:08.820084Z,     iopub.status.busy: 2022-03-01T11:15:08.820084Z,     iopub.status.idle: 2022-03-01T11:15:08.963154Z,     shell.execute_reply: 2022-03-01T11:15:08.963154Z    },    papermill: {     duration: 0.155307,     end_time: 2022-03-01T11:15:08.964154,     exception: false,     start_time: 2022-03-01T11:15:08.808847,     status: completed    },    scrolled: true,    tags: []   },   outputs: [],   source: [    # Gets historical data from the subscribed assets, the last 360 datapoints with daily resolution,    h1 = qb.History(qb.Securities.Keys, startDate, endDate, Resolution.Daily),    ,    if h1.shape[0] < 1:,        raise Exception(History request resulted in no data)   ]  },  {   cell_type: markdown,   id: 0512fec7,   metadata: {    papermill: {     duration: 0.004821,     end_time: 2022-03-01T11:15:08.973975,     exception: false,     start_time: 2022-03-01T11:15:08.969154,     status: completed    },    tags: []   },   source: [    ### Indicators,    ,    We can easily get the indicator of a given symbol with QuantBook. ,    ,    For all indicators, please checkout QuantConnect Indicators [Reference Table](https://www.quantconnect.com/docs#Indicators-Reference-Table)   ]  },  {   cell_type: code,   execution_count: 6,   id: 6338a6b7,   metadata: {    execution: {     iopub.execute_input: 2022-03-01T11:15:08.992485Z,     iopub.status.busy: 2022-03-01T11:15:08.992485Z,     iopub.status.idle: 2022-03-01T11:15:09.040484Z,     shell.execute_reply: 2022-03-01T11:15:09.040484Z    },    papermill: {     duration: 0.062003,     end_time: 2022-03-01T11:15:09.040484,     exception: false,     start_time: 2022-03-01T11:15:08.978481,     status: completed    },    tags: []   },   outputs: [],   source: [    # Example with BB, it is a datapoint indicator,    # Define the indicator,    bb = BollingerBands(30, 2),    ,    # Gets historical data of indicator,    bbdf = qb.Indicator(bb, SPY, startDate, endDate, Resolution.Daily),    ,    # drop undesired fields,    bbdf = bbdf.drop('standarddeviation', 1),    ,    if bbdf.shape[0] < 1:,        raise Exception(Bollinger Bands resulted in no data)   ]  },  {   cell_type: code,   execution_count: null,   id: f39ae65e,   metadata: {    papermill: {     duration: 0.003999,     end_time: 2022-03-01T11:15:09.051483,     exception: false,     start_time: 2022-03-01T11:15:09.047484,     status: completed    },    tags: []   },   outputs: [],   source: []  } ], metadata: {  kernelspec: {   display_name: Python 3 (ipykernel),   language: python,   name: python3  },  language_info: {   codemirror_mode: {    name: ipython,    version: 3   },   file_extension: .py,   mimetype: text/x-python,   name: python,   nbconvert_exporter: python,   pygments_lexer: ipython3,   version: 3.6.8  },  papermill: {   default_parameters: {},   duration: 4.290638,   end_time: 2022-03-01T11:15:09.402307,   environment_variables: {},   exception: null,   input_path: D:\\\\quantconnect\\\\Lean\\\\Launcher\\\\bin\\\\Debug\\\\BasicTemplateResearch.ipynb,   output_path: D:\\\\quantconnect\\\\Lean\\\\Launcher\\\\bin\\\\Debug\\\\BasicTemplateResearch-output.ipynb,   parameters: {},   start_time: 2022-03-01T11:15:05.111669,   version: 2.3.4  } }, nbformat: 4, nbformat_minor: 5}";
    }
}
