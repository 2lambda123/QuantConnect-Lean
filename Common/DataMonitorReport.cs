/*
 * QUANTCONNECT.COM - Democratizing Finance, Empowering Individuals.
 * Lean Algorithmic Trading Engine v2.0. Copyright 2014 QuantConnect Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

using Newtonsoft.Json;
using QuantConnect.Interfaces;
using QuantConnect.Util;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace QuantConnect
{
    /// <summary>
    /// Report generated by the <see cref="IDataMonitor"/> class that contains information about data requests
    /// </summary>
    public class DataMonitorReport
    {
        /// <summary>
        /// Paths of the files that were requested and successfully fetched
        /// </summary>
        [JsonProperty(PropertyName = "succeeded-data-requests")]
        public IReadOnlySet<string> SucceededDataRequests { get; set; }

        /// <summary>
        /// Paths of the files that were requested but could not be fetched
        /// </summary>
        [JsonProperty(PropertyName = "failed-data-requests")]
        public IReadOnlySet<string> FailedDataRequests { get; set; }

        /// <summary>
        /// Gets the number of data files that were requested and successfully fetched
        /// </summary>
        [JsonProperty(PropertyName = "succeeded-data-requests-count")]
        public int SucceededDataRequestsCount
        {
            get { return SucceededDataRequests.Count; }
        }

        /// <summary>
        /// Gets the number of data files that were requested but could not be fetched
        /// </summary>
        [JsonProperty(PropertyName = "failed-data-requests-count")]
        public int FailedDataRequestsCount
        {
            get { return FailedDataRequests.Count; }
        }

        /// <summary>
        /// Gets the number of data files that were requested
        /// </summary>
        [JsonProperty(PropertyName = "total-data-requests-count")]
        public int TotalRequestsCount
        {
            get { return SucceededDataRequestsCount + FailedDataRequestsCount; }
        }

        /// <summary>
        /// Fets the percentage of data requests that could not be satisfied
        /// </summary>
        [JsonProperty(PropertyName = "failed-data-requests-percentage")]
        public double FailedDataRequestsPercentage
        {
            get
            {
                var requestsCount = TotalRequestsCount;
                if (requestsCount == 0)
                {
                    return 0;
                }

                return Math.Round(FailedDataRequests.Count / (double)requestsCount * 100);
            }
        }

        private IReadOnlyList<double> _requestRates;

        /// <summary>
        /// Rates at which data requests were made per second
        /// </summary>
        [JsonProperty(PropertyName = "data-request-rates")]
        public IReadOnlyList<double> DataRequestRates 
        {
            get
            {
                return _requestRates;
            }
            set
            {
                _requestRates = value.Select(x => Math.Round(x)).ToList().AsReadOnly();
            }
        }

        /// <summary>
        /// Universe data path that were requested and successfully fetched
        /// </summary>
        [JsonProperty(PropertyName = "succeeded-universe-data-requests")]
        public IEnumerable<string> SucceededUniverseDataRequests
        {
            get { return GetUniverseDataPaths(SucceededDataRequests); }
        }

        /// <summary>
        /// Universe data paths that were requested but could not be fetched
        /// </summary>
        [JsonProperty(PropertyName = "failed-universe-data-requests")]
        public IEnumerable<string> FailedUniverseDataRequests
        {
            get { return GetUniverseDataPaths(FailedDataRequests); }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataMonitorReport"/> class
        /// </summary>
        /// <param name="succeededDataRequests">List of data paths that were requested and successfuly served</param>
        /// <param name="failedDataRequests">List of data paths that were requested but could not be served</param>
        /// <param name="dataRequestRates">Rates at which data requests were made per second</param>
        public DataMonitorReport(
            IReadOnlySet<string> succeededDataRequests,
            IReadOnlySet<string> failedDataRequests,
            IReadOnlyList<double> dataRequestRates)
        {
            SucceededDataRequests = succeededDataRequests;
            FailedDataRequests = failedDataRequests;
            DataRequestRates = dataRequestRates;
        }

        /// <summary>
        /// Gets the universe data paths from the specified data paths
        /// </summary>
        private static IEnumerable<string> GetUniverseDataPaths(IReadOnlySet<string> paths)
        {
            Func<string, string, bool> areEqual = (str1, str2) =>
            {
                return str1.Equals(str2, System.StringComparison.OrdinalIgnoreCase);
            };
            Func<DirectoryInfo, bool> isUniversePath = directory =>
            {
                return areEqual(directory.Name, "coarse") && areEqual(directory.Parent.Name, "fundamental");
            };
            Func<DirectoryInfo, bool> isAlternativeDataUniversePath = directory =>
            {
                return areEqual(directory.Name, "universe");
            };

            return paths.Where(path =>
            {
                var directoryInfo = new DirectoryInfo(path);
                var directory = directoryInfo.Parent;
                return isUniversePath(directory) || isAlternativeDataUniversePath(directory);
            });
        }
    }
}
